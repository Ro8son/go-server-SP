// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"server/types"
)

const addAlbum = `-- name: AddAlbum :exec
INSERT INTO album (
  title, owner_id, cover_id
) VALUES (
  ?, ?, ?
)
`

type AddAlbumParams struct {
	Title   types.JSONNullString `json:"title"`
	OwnerID int64                `json:"owner_id"`
	CoverID types.JSONNullInt64  `json:"cover_id"`
}

func (q *Queries) AddAlbum(ctx context.Context, arg AddAlbumParams) error {
	_, err := q.db.ExecContext(ctx, addAlbum, arg.Title, arg.OwnerID, arg.CoverID)
	return err
}

const addFile = `-- name: AddFile :one
INSERT INTO files (
  owner_id, file_name, title, description, coordinates, checksum
) VALUES(
  ?, ?, ?, ?, ?, ?
) RETURNING id
`

type AddFileParams struct {
	OwnerID     int64                `json:"owner_id"`
	FileName    string               `json:"file_name"`
	Title       types.JSONNullString `json:"title"`
	Description types.JSONNullString `json:"description"`
	Coordinates types.JSONNullString `json:"coordinates"`
	Checksum    string               `json:"checksum"`
}

func (q *Queries) AddFile(ctx context.Context, arg AddFileParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addFile,
		arg.OwnerID,
		arg.FileName,
		arg.Title,
		arg.Description,
		arg.Coordinates,
		arg.Checksum,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addGuestFile = `-- name: AddGuestFile :one
INSERT INTO fileGuestShares (
  file_id, url, expires_at, max_uses
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, file_id, url, created_at, expires_at, max_uses
`

type AddGuestFileParams struct {
	FileID    int64               `json:"file_id"`
	Url       string              `json:"url"`
	ExpiresAt types.JSONNullTime  `json:"expires_at"`
	MaxUses   types.JSONNullInt64 `json:"max_uses"`
}

func (q *Queries) AddGuestFile(ctx context.Context, arg AddGuestFileParams) (Fileguestshare, error) {
	row := q.db.QueryRowContext(ctx, addGuestFile,
		arg.FileID,
		arg.Url,
		arg.ExpiresAt,
		arg.MaxUses,
	)
	var i Fileguestshare
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Url,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.MaxUses,
	)
	return i, err
}

const addTag = `-- name: AddTag :one
INSERT INTO tags (
  name
) VALUES (
  ?
)
RETURNING id
`

func (q *Queries) AddTag(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, addTag, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addToAlbum = `-- name: AddToAlbum :exec
INSERT OR IGNORE INTO fileAlbum (
  file_id, album_id
) VALUES (
  ?, ?
)
`

type AddToAlbumParams struct {
	FileID  int64 `json:"file_id"`
	AlbumID int64 `json:"album_id"`
}

func (q *Queries) AddToAlbum(ctx context.Context, arg AddToAlbumParams) error {
	_, err := q.db.ExecContext(ctx, addToAlbum, arg.FileID, arg.AlbumID)
	return err
}

const changeRole = `-- name: ChangeRole :one
UPDATE users
SET is_admin = ?
WHERE id = ?
RETURNING id, login, password, email, profile, is_admin
`

type ChangeRoleParams struct {
	IsAdmin int64 `json:"is_admin"`
	ID      int64 `json:"id"`
}

func (q *Queries) ChangeRole(ctx context.Context, arg ChangeRoleParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeRole, arg.IsAdmin, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Email,
		&i.Profile,
		&i.IsAdmin,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  login, password, email
) VALUES(
  ?, ?, ?
)
`

type CreateUserParams struct {
	Login    string               `json:"login"`
	Password string               `json:"password"`
	Email    types.JSONNullString `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Login, arg.Password, arg.Email)
	return err
}

const decrementShareUses = `-- name: DecrementShareUses :exec
UPDATE fileguestshares
SET max_uses = max_uses - 1
WHERE id = ? AND max_uses > 0
`

func (q *Queries) DecrementShareUses(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, decrementShareUses, id)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files
WHERE id = ?
`

func (q *Queries) DeleteFile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFile, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT id, owner_id, cover_id, title FROM album
WHERE id = ?
`

func (q *Queries) GetAlbum(ctx context.Context, id int64) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.CoverID,
		&i.Title,
	)
	return i, err
}

const getAlbums = `-- name: GetAlbums :many
SELECT id, owner_id, cover_id, title FROM album
WHERE owner_id = ?
`

func (q *Queries) GetAlbums(ctx context.Context, ownerID int64) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getAlbums, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.CoverID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmail = `-- name: GetEmail :one
SELECT email FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, id int64) (types.JSONNullString, error) {
	row := q.db.QueryRowContext(ctx, getEmail, id)
	var email types.JSONNullString
	err := row.Scan(&email)
	return email, err
}

const getFile = `-- name: GetFile :one
SELECT id, owner_id, file_name, title, description, coordinates, checksum, created_at FROM files
WHERE id = ?
`

func (q *Queries) GetFile(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.FileName,
		&i.Title,
		&i.Description,
		&i.Coordinates,
		&i.Checksum,
		&i.CreatedAt,
	)
	return i, err
}

const getFileFromAlbum = `-- name: GetFileFromAlbum :many
SELECT file_id
FROM fileAlbum
WHERE album_id = ?
`

func (q *Queries) GetFileFromAlbum(ctx context.Context, albumID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFileFromAlbum, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var file_id int64
		if err := rows.Scan(&file_id); err != nil {
			return nil, err
		}
		items = append(items, file_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileOwner = `-- name: GetFileOwner :one
SELECT owner_id FROM files
WHERE id = ?
`

func (q *Queries) GetFileOwner(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFileOwner, id)
	var owner_id int64
	err := row.Scan(&owner_id)
	return owner_id, err
}

const getFiles = `-- name: GetFiles :many
SELECT id, file_name, checksum, created_at FROM files 
WHERE owner_id = ?
`

type GetFilesRow struct {
	ID        int64              `json:"id"`
	FileName  string             `json:"file_name"`
	Checksum  string             `json:"checksum"`
	CreatedAt types.JSONNullTime `json:"created_at"`
}

func (q *Queries) GetFiles(ctx context.Context, ownerID int64) ([]GetFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFiles, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilesRow
	for rows.Next() {
		var i GetFilesRow
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.Checksum,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesByTag = `-- name: GetFilesByTag :many
SELECT files.id, files.owner_id, files.file_name, files.title, files.description, files.coordinates, files.checksum, files.created_at FROM fileTags
LEFT JOIN files ON files.id = fileTags.file_id
WHERE fileTags.tag_id = ? AND files.owner_id = ?
`

type GetFilesByTagParams struct {
	TagID   int64 `json:"tag_id"`
	OwnerID int64 `json:"owner_id"`
}

type GetFilesByTagRow struct {
	ID          types.JSONNullInt64  `json:"id"`
	OwnerID     types.JSONNullInt64  `json:"owner_id"`
	FileName    types.JSONNullString `json:"file_name"`
	Title       types.JSONNullString `json:"title"`
	Description types.JSONNullString `json:"description"`
	Coordinates types.JSONNullString `json:"coordinates"`
	Checksum    types.JSONNullString `json:"checksum"`
	CreatedAt   types.JSONNullTime   `json:"created_at"`
}

func (q *Queries) GetFilesByTag(ctx context.Context, arg GetFilesByTagParams) ([]GetFilesByTagRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByTag, arg.TagID, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilesByTagRow
	for rows.Next() {
		var i GetFilesByTagRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.FileName,
			&i.Title,
			&i.Description,
			&i.Coordinates,
			&i.Checksum,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIsAdmin = `-- name: GetIsAdmin :one
SELECT is_admin FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetIsAdmin(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getIsAdmin, id)
	var is_admin int64
	err := row.Scan(&is_admin)
	return is_admin, err
}

const getLogin = `-- name: GetLogin :one
SELECT login FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetLogin(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getLogin, id)
	var login string
	err := row.Scan(&login)
	return login, err
}

const getPassword = `-- name: GetPassword :one
SELECT password FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPassword(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getPassword, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getProfile = `-- name: GetProfile :one
SELECT profile FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id int64) (types.JSONNullString, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var profile types.JSONNullString
	err := row.Scan(&profile)
	return profile, err
}

const getRole = `-- name: GetRole :one
SELECT is_admin FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var is_admin int64
	err := row.Scan(&is_admin)
	return is_admin, err
}

const getShareDownload = `-- name: GetShareDownload :one
SELECT files.id, files.owner_id, files.file_name, files.title, files.description, files.coordinates, files.checksum, files.created_at FROM fileGuestShares
LEFT JOIN files ON files.id = fileGuestShares.file_id
WHERE fileGuestShares.url = ? AND fileGuestShares.id = ?
`

type GetShareDownloadParams struct {
	Url string `json:"url"`
	ID  int64  `json:"id"`
}

type GetShareDownloadRow struct {
	ID          types.JSONNullInt64  `json:"id"`
	OwnerID     types.JSONNullInt64  `json:"owner_id"`
	FileName    types.JSONNullString `json:"file_name"`
	Title       types.JSONNullString `json:"title"`
	Description types.JSONNullString `json:"description"`
	Coordinates types.JSONNullString `json:"coordinates"`
	Checksum    types.JSONNullString `json:"checksum"`
	CreatedAt   types.JSONNullTime   `json:"created_at"`
}

func (q *Queries) GetShareDownload(ctx context.Context, arg GetShareDownloadParams) (GetShareDownloadRow, error) {
	row := q.db.QueryRowContext(ctx, getShareDownload, arg.Url, arg.ID)
	var i GetShareDownloadRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.FileName,
		&i.Title,
		&i.Description,
		&i.Coordinates,
		&i.Checksum,
		&i.CreatedAt,
	)
	return i, err
}

const getShareUseCount = `-- name: GetShareUseCount :one
SELECT max_uses FROM fileGuestShares
WHERE id = ?
`

func (q *Queries) GetShareUseCount(ctx context.Context, id int64) (types.JSONNullInt64, error) {
	row := q.db.QueryRowContext(ctx, getShareUseCount, id)
	var max_uses types.JSONNullInt64
	err := row.Scan(&max_uses)
	return max_uses, err
}

const getSharedFiles = `-- name: GetSharedFiles :many
SELECT fileguestshares.id, fileguestshares.file_id, fileguestshares.url, fileguestshares.created_at, fileguestshares.expires_at, fileguestshares.max_uses FROM fileGuestShares
LEFT JOIN files ON files.id = fileGuestShares.file_id
WHERE files.owner_id = ? OR ? = 1
`

type GetSharedFilesParams struct {
	OwnerID int64       `json:"owner_id"`
	IsAdmin interface{} `json:"column_2"`
}

func (q *Queries) GetSharedFiles(ctx context.Context, arg GetSharedFilesParams) ([]Fileguestshare, error) {
	rows, err := q.db.QueryContext(ctx, getSharedFiles, arg.OwnerID, arg.IsAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fileguestshare
	for rows.Next() {
		var i Fileguestshare
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Url,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.MaxUses,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagById = `-- name: GetTagById :one
SELECT id, name
FROM tags
WHERE id = ?
`

func (q *Queries) GetTagById(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagById, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name
FROM tags
WHERE name = ?
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getTags = `-- name: GetTags :many
select id, name
FROM tags
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByFile = `-- name: GetTagsByFile :many
SELECT tag_id 
FROM fileTags
WHERE file_id = ?
`

func (q *Queries) GetTagsByFile(ctx context.Context, fileID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByFile, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var tag_id int64
		if err := rows.Scan(&tag_id); err != nil {
			return nil, err
		}
		items = append(items, tag_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, login, password, is_admin FROM users 
WHERE id = ? LIMIT 1
`

type GetUserRow struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	Password string `json:"password"`
	IsAdmin  int64  `json:"is_admin"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password, is_admin FROM users 
WHERE login = ? LIMIT 1
`

type GetUserByLoginRow struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	Password string `json:"password"`
	IsAdmin  int64  `json:"is_admin"`
}

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (GetUserByLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByLogin, login)
	var i GetUserByLoginRow
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.IsAdmin,
	)
	return i, err
}

const tagsConnect = `-- name: TagsConnect :exec
INSERT INTO fileTags (
  file_id, tag_id
) VALUES (
  ?, ?
)
`

type TagsConnectParams struct {
	FileID int64 `json:"file_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) TagsConnect(ctx context.Context, arg TagsConnectParams) error {
	_, err := q.db.ExecContext(ctx, tagsConnect, arg.FileID, arg.TagID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = ?, profile = ?
WHERE id = ?
RETURNING id, login, password, email, profile, is_admin
`

type UpdateUserParams struct {
	Email   types.JSONNullString `json:"email"`
	Profile types.JSONNullString `json:"profile"`
	ID      int64                `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.Profile, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Email,
		&i.Profile,
		&i.IsAdmin,
	)
	return i, err
}
